name: colcon-build
description: ""

inputs:
  rosdistro:
    description: ""
    required: true
  target-packages:
    description: ""
    required: true
  build-depends-repos:
    description: ""
    required: false
  packages-above-repos:
    description: ""
    required: false
  cmake-build-type:
    description: ""
    required: false
    default: Release
  token:
    description: ""
    required: false
    default: ${{ github.token }}
  include-eol-distros:
    description: ""
    required: false
  cache-key-element:
    description: Will be part of the cache key
    default: default
    required: false
  build-pre-command:
    description: Will be prepended to the colcon build command. e.g. "nice -n 19" or "taskset --cpu-list 0-2"
    required: false
    default: ""
  colcon-parallel-workers-flag:
    description: Will be appended to the colcon build command to limit number of packages built in parallel. e.g. "--parallel-workers 3"
    default: ""
    required: false
  makeflags:
    description: Will be exported as MAKEFLAGS environment variable. e.g. "-j 4"
    default: ""
    required: false
  underlay-workspace:
    description: Path to the underlay workspace containing setup.sh
    default: ""
    required: false
  use-local-mixin:
    description: Will use the local mixin repository to avoid rate limits
    default: true
    required: false

runs:
  using: composite
  steps:
    - name: Show target packages
      run: |
        echo "target packages: ${{ inputs.target-packages }}"
      shell: bash

    - name: Install pip for rosdep
      run: |
        sudo apt-get -yqq update
        sudo apt-get -yqq install python3-pip
      shell: bash

    - name: Set git config
      if: ${{ inputs.build-depends-repos != '' || inputs.packages-above-repos != '' }}
      uses: autowarefoundation/autoware-github-actions/set-git-config@v1
      with:
        token: ${{ inputs.token }}

    - name: Clone dependency packages
      if: ${{ inputs.build-depends-repos != '' }}
      run: |
        mkdir -p dependency_ws
        vcs import dependency_ws < ${{ inputs.build-depends-repos }}
      shell: bash

    - name: Clone above dependency packages
      if: ${{ inputs.packages-above-repos != '' }}
      run: |
        mkdir -p dependency_ws
        vcs import dependency_ws < ${{ inputs.packages-above-repos }}
      shell: bash

    - run: sudo apt-get -yqq update
      shell: bash

    - name: Ensure rosdep directory exists
      run: mkdir -p ~/.ros/rosdep
      shell: bash

    - name: Restore rosdep cache
      id: rosdep-restore
      uses: actions/cache/restore@v4
      with:
        path: ~/.ros/rosdep
        key: rosdep-${{ runner.arch }}-${{ inputs.rosdistro }}

    - name: Check rosdep cache age
      id: check-cache
      run: |
        timestamp_file=~/.ros/rosdep/CACHE_TIMESTAMP
        ttl=$(( 3 * 3600 ))  # 3 hours
        if [ -f "$timestamp_file" ]; then
          age=$(( $(date +%s) - $(cat "$timestamp_file") ))
          echo "Cache age is $age seconds"
          [ "$age" -gt "$ttl" ] && echo "stale=true" >> $GITHUB_OUTPUT || echo "stale=false" >> $GITHUB_OUTPUT
        else
          echo "No timestamp file found. Treating cache as stale."
          echo "stale=true" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Run rosdep update (if stale)
      if: steps.check-cache.outputs.stale == 'true'
      id: rosdep-update
      run: |
        echo "Running rosdep update..."
        if [ "${{ inputs.include-eol-distros }}" = "true" ]; then
          rosdep update --include-eol-distros
        else
          rosdep update
        fi
        date +%s > ~/.ros/rosdep/CACHE_TIMESTAMP
      shell: bash
      continue-on-error: true

    - name: Save rosdep cache
      if: steps.check-cache.outputs.stale == 'true' && steps.rosdep-update.outcome == 'success'
      uses: actions/cache/save@v4
      with:
        path: ~/.ros/rosdep
        key: rosdep-${{ runner.arch }}-${{ inputs.rosdistro }}

    - name: Run rosdep install
      run: |
        package_paths=$(colcon list -p --packages-above-and-dependencies ${{ inputs.target-packages }} --base-paths . dependency_ws)
        if [ -f "${{ inputs.underlay-workspace }}/setup.sh" ]; then
          . ${{ inputs.underlay-workspace }}/setup.sh
        fi
        DEBIAN_FRONTEND=noninteractive rosdep install -yqq --from-paths ${package_paths} --ignore-src --rosdistro ${{ inputs.rosdistro }}
      shell: bash

    - name: Set up colcon-mixin
      if: ${{ inputs.use-local-mixin == 'false' }}
      run: |
        colcon mixin add default https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml || true
        colcon mixin update default
      shell: bash

    - name: Checkout mixin repo locally
      if: ${{ inputs.use-local-mixin == 'true' }}
      uses: actions/checkout@v4
      with:
        repository: colcon/colcon-mixin-repository
        path: colcon-mixin-repository

    - name: Set up colcon-mixin (from local)
      if: ${{ inputs.use-local-mixin == 'true' }}
      run: |
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        INDEX="$GITHUB_WORKSPACE/colcon-mixin-repository/index.yaml"

        # Remove existing mixin repo if it exists
        colcon mixin remove default || echo "default mixin not previously added"

        # Add local mixin repo
        colcon mixin add default file://"$INDEX"

        # This reads the mixin files from the local clone, no HTTP
        colcon mixin update default
      shell: bash

    - name: Build
      run: |
        . /opt/ros/${{ inputs.rosdistro }}/setup.sh
        if [ -f "${{ inputs.underlay-workspace }}/setup.sh" ]; then
          . ${{ inputs.underlay-workspace }}/setup.sh
        fi
        # Cannot use unshare inside a Docker container, so we just disable
        # DNS lookups instead.
        cat /etc/nsswitch.conf
        sed -e 's#hosts:\(.*\)dns\(.*\)#hosts:\1\2#g' -i.bak /etc/nsswitch.conf
        cat /etc/nsswitch.conf
        MAKEFLAGS="${{ inputs.makeflags }}"
        echo "MAKEFLAGS=$MAKEFLAGS"  # for debugging
        ${{ inputs.build-pre-command }} colcon build ${{ inputs.colcon-parallel-workers-flag }} \
          --event-handlers console_cohesion+ \
          --packages-above-and-dependencies ${{ inputs.target-packages }} \
          --cmake-args -DCMAKE_BUILD_TYPE=${{ inputs.cmake-build-type }} \
          --mixin coverage-gcc coverage-pytest compile-commands
        mv /etc/nsswitch.conf.bak /etc/nsswitch.conf
        cat /etc/nsswitch.conf
      shell: bash

    - name: Cache build artifacts
      uses: actions/cache/save@v4
      with:
        path: |
          ./build
          ./install
        key: build-${{ runner.arch }}-${{ inputs.rosdistro }}-${{ inputs.cache-key-element }}-${{ inputs.cmake-build-type }}-${{ github.sha }}
