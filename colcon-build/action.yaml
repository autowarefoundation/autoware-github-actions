name: colcon-build
description: ""

inputs:
  rosdistro:
    description: ""
    required: true
  target-packages:
    description: ""
    required: true
  build-depends-repos:
    description: ""
    required: false
  cmake-build-type:
    description: ""
    required: false
    default: Release
  token:
    description: ""
    required: false
    default: ${{ github.token }}
  include-eol-distros:
    description: ""
    required: false
  cache-key-element:
    description: Will be part of the cache key
    default: default
    required: false
  build-pre-command:
    description: Will be prepended to the colcon build command. e.g. "nice -n 19" or "taskset --cpu-list 0-2"
    required: false
    default: ""
  colcon-parallel-workers-flag:
    description: Will be appended to the colcon build command to limit number of packages built in parallel. e.g. "--parallel-workers 3"
    default: ""
    required: false
  makeflags:
    description: Will be exported as MAKEFLAGS environment variable. e.g. "-j 4"
    default: ""
    required: false

runs:
  using: composite
  steps:
    - name: Show target packages
      run: |
        echo "target packages: ${{ inputs.target-packages }}"
      shell: bash

    - name: Install pip for rosdep
      run: |
        sudo apt-get -yqq update
        sudo apt-get -yqq install python3-pip
      shell: bash

    - name: Set git config
      if: ${{ inputs.build-depends-repos != '' }}
      uses: autowarefoundation/autoware-github-actions/set-git-config@v1
      with:
        token: ${{ inputs.token }}

    - name: Clone dependency packages
      if: ${{ inputs.build-depends-repos != '' }}
      run: |
        mkdir -p dependency_ws
        vcs import dependency_ws < ${{ inputs.build-depends-repos }}
      shell: bash

ã€€   - name: Source /opt/autoware//setup.bash if available
      run: |
        if [ -f "/opt/autoware/setup.sh" ]; then
          . /opt/autoware/setup.sh
        else
          echo "/opt/autoware/setup.sh not found"
        fi
      shell: bash

    - name: Run rosdep install
      run: |
        package_paths=$(colcon list -p --packages-above-and-dependencies ${{ inputs.target-packages }} --base-paths . dependency_ws)
        sudo apt-get -yqq update
        if [ "${{ inputs.include-eol-distros }}" = "true" ]; then
            rosdep update --include-eol-distros
        else
            rosdep update
        fi
        DEBIAN_FRONTEND=noninteractive rosdep install -yqq --from-paths ${package_paths} --ignore-src --rosdistro ${{ inputs.rosdistro }}
      shell: bash

    - name: Set up colcon-mixin
      run: |
        colcon mixin add default https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml || true
        colcon mixin update default
      shell: bash

    - name: Build
      run: |
        . /opt/ros/${{ inputs.rosdistro }}/setup.sh
        # Cannot use unshare inside a Docker container, so we just disable
        # DNS lookups instead.
        cat /etc/nsswitch.conf
        sed -e 's#hosts:\(.*\)dns\(.*\)#hosts:\1\2#g' -i.bak /etc/nsswitch.conf
        cat /etc/nsswitch.conf
        MAKEFLAGS="${{ inputs.makeflags }}"
        echo "MAKEFLAGS=$MAKEFLAGS"  # for debugging
        ${{ inputs.build-pre-command }} colcon build ${{ inputs.colcon-parallel-workers-flag }} \
          --event-handlers console_cohesion+ \
          --packages-above-and-dependencies ${{ inputs.target-packages }} \
          --cmake-args -DCMAKE_BUILD_TYPE=${{ inputs.cmake-build-type }} \
          --mixin coverage-gcc coverage-pytest compile-commands
        mv /etc/nsswitch.conf.bak /etc/nsswitch.conf
        cat /etc/nsswitch.conf
      shell: bash

    - name: Cache build artifacts
      uses: actions/cache/save@v4
      with:
        path: |
          ./build
          ./install
        key: build-${{ runner.arch }}-${{ inputs.rosdistro }}-${{ inputs.cache-key-element }}-${{ inputs.cmake-build-type }}-${{ github.sha }}
