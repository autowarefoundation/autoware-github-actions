name: Release new tag when merged

inputs:
  github_token:
    description: The GitHub token
    required: true
  commit_sha:
    description: The commit SHA to release
    required: true

runs:
  using: composite
  steps:
    - name: Checkout target branch (main repo)
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.commit_sha }}

    - name: Set git config
      uses: autowarefoundation/autoware-github-actions/set-git-config@v1
      with:
        token: ${{ inputs.github_token }}

    # Find the latest version with x.y.z format and check if the latest tag already exists
    # If not, create a new tag
    - name: Generate changelog and do release
      shell: bash
      run: |
        # Get the version string from one of the package.xml
        NEW_VERSION=
        while IFS= read -r file; do
          NEW_VERSION=$(grep '<version>' "$file" | head -1 | sed 's/.*<version>\(.*\)<\/version>.*/\1/')
          # Check if the version has a valid format: x.y.z
          if [[ "$NEW_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            echo "‚úÖ New version is: $NEW_VERSION"
            break
          else
            echo "‚ùå $file has invalid format version $NEW_VERSION (expected x.y.z)"
            exit 1
          fi
        done < <(find . -name package.xml)

        # Output the new version
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Generate changelog and do release
      id: generate_release
      shell: bash
      run: |
        # Find current version from package.xml
        NEW_VERSION=
        while IFS= read -r file; do
          CANDIDATE=$(grep '<version>' "$file" | head -1 | sed 's/.*<version>\(.*\)<\/version>.*/\1/')
          if [[ "$CANDIDATE" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            # Insert the version if it is the first valid version
            if [[ -z "$NEW_VERSION" ]]; then
              NEW_VERSION="$CANDIDATE"
            elif [[ "$CANDIDATE" != "$NEW_VERSION" ]]; then
              echo "‚ùå $file has inconsistent version $CANDIDATE (one of others is $NEW_VERSION)"
              exit 1
            fi
          else
            echo "‚ùå $file has invalid format version $CANDIDATE (expected x.y.z)"
            exit 1
          fi
        done < <(find . -name package.xml)

        echo "‚úÖ Found consistent version $NEW_VERSION in all package.xml files"

        # List remote tags that match x.y.z
        git fetch --tags
        TAGS=$(git tag -l)

        # If no tags are found, push the new version
        if [ -z "$TAGS" ]; then
          echo "No tags found. Let's push the new version"
        else
          # If matches are found, continue processing
          TAGS=$(echo "$TAGS" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V)
          echo "Existing tags:"
          echo "$TAGS"
          LATEST_TAG=$(echo "$TAGS" | tail -n1)

          # Compare versions: Function returns 0 if $1 > $2
          version_gt() {
            # returns 0 if $1 > $2
            [ "$(printf '%s\n' "$1" "$2" | sort -V | head -n1)" != "$1" ]
          }

          # Create a new tag if there is no previous tag or the new version is newer than the latest tag
          if version_gt "$NEW_VERSION" "$LATEST_TAG"; then
            echo "New version $NEW_VERSION is newer than latest tag $LATEST_TAG. Will create tag."
          else
            echo "Tag $NEW_VERSION is not newer than latest tag $LATEST_TAG. No action taken."
            exit 0
          fi
        fi

        # Create and push the new tag
        git tag "$NEW_VERSION"
        git push origin "$NEW_VERSION"
        echo "üéâ Created and pushed tag $NEW_VERSION"
