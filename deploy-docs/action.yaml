name: generate-docs
description: ""

inputs:
  token:
    description: ""
    required: true
  latest:
    description: ""
    required: false
  mkdocs-requirements-txt:
    description: ""
    required: false
    default: ${GITHUB_ACTION_PATH}/mkdocs-requirements.txt

runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install MkDocs
      run: |
        pip3 install -U wheel
        pip3 install -r ${{ inputs.mkdocs-requirements-txt }}
      shell: bash

    # TODO: Remove after v1.2.0 or v2.0.0 is released
    - name: (tmp) Install latest mike
      run: |
        pip3 install -U git+https://github.com/jimporter/mike
      shell: bash

    - name: Set git config
      uses: autowarefoundation/autoware-github-actions/set-git-config@v1
      with:
        token: ${{ inputs.token }}

    - name: Set docs version name
      id: set-docs-version-name
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          PR_NUMBER="${{ github.event.pull_request.number }}"
          VERSION_NAME="pr-$PR_NUMBER"
        elif [ "${{ github.event_name }}" = "pull_request_target" ]; then
          PR_NUMBER="${{ github.event.pull_request.number }}"
          VERSION_NAME="pr-$PR_NUMBER"
        else
          PR_NUMBER=""
          VERSION_NAME="${GITHUB_REF#refs/heads/}"
        fi

        echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT

        # Replace invalid character '/' by '-'
        echo "version-name=${VERSION_NAME//\//-}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Deploy docs
      run: |
        git fetch
        mike deploy --push ${{ steps.set-docs-version-name.outputs.version-name }}
      shell: bash

    - name: Create alias 'latest'
      if: ${{ inputs.latest == 'true' }}
      run: |
        mike deploy --push latest
      shell: bash

    - name: Create comment body
      if: ${{ steps.set-docs-version-name.outputs.pr-number != '' }}
      id: create-comment-body
      run: |
        mkdocs_yaml=$(find . -type f -path './mkdocs.yaml' -or -path './mkdocs.yml')
        site_url=$(grep -oP "site_url:\s+\K(.*)" "$mkdocs_yaml")
        base_url="$site_url/${{ steps.set-docs-version-name.outputs.version-name }}/"
        comment_lines=$(${GITHUB_ACTION_PATH}/create-doc-comment.sh "$base_url" "origin/$GITHUB_BASE_REF")

        # Output multiline strings: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "comment-body<<$EOF" >> $GITHUB_OUTPUT
        echo "$comment_lines" >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT
      shell: bash

    - name: Find PR comment
      if: ${{ steps.set-docs-version-name.outputs.pr-number != '' }}
      id: find-comment
      uses: peter-evans/find-comment@v3
      with:
        issue-number: ${{ steps.set-docs-version-name.outputs.pr-number }}
        comment-author: github-actions[bot]
        body-includes: Documentation URL

    - name: Update PR comment
      if: ${{ steps.set-docs-version-name.outputs.pr-number != '' }}
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        issue-number: ${{ steps.set-docs-version-name.outputs.pr-number }}
        token: ${{ inputs.token }}
        body: |
          ${{ steps.create-comment-body.outputs.comment-body }}
        edit-mode: replace
