name: Bump package.xml version and Release

inputs:
  github_token:
    description: "The GitHub token"
    required: true
  source_branch:
    description: "The branch to merge from"
    required: true
    default: "main"
  target_branch:
    description: "The branch to merge into (release branch)"
    required: true
    default: "humble"
  bump_version:
    description: "The type of version bump (patch, minor, major)"
    required: true
    default: "patch"
    type: choice
    options:
      - patch
      - minor
      - major
  repository_owner:
    description: "The owner of the source repository (e.g., fork user/org)"
    required: false
    default: "autowarefoundation"
  # Optional: Add repository_name if forks may use different names
  # repository_name:
  #   description: 'The source repository name (defaults to current repo)'
  #   required: false
  #   default: ${{ github.event.repository.name }}

runs:
  using: "composite"
  steps:
    - name: Checkout target branch (main repo)
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.target_branch }}
        fetch-depth: 0

    - name: Set git config
      uses: autowarefoundation/autoware-github-actions/set-git-config@v1
      with:
        token: ${{ inputs.github_token }}

    - name: Add source remote if from fork
      id: add_remote
      shell: bash
      run: |
        if [ "${{ inputs.repository_owner }}" != "${{ github.repository_owner }}" ]; then
          echo "Using fork: ${{ inputs.repository_owner }}"
          git remote add source-fork https://github.com/${{ inputs.repository_owner }}/${{ github.event.repository.name }}.git
          git fetch source-fork ${{ inputs.source_branch }}
        else
          git fetch origin ${{ inputs.source_branch }}
        fi

    - name: Generate PR branch name
      id: generate_branch_name
      shell: bash
      run: |
        BRANCH_NAME="bump/${{ inputs.source_branch }}-to-${{ inputs.target_branch }}-with-${{ inputs.bump_version }}-${{ github.run_id }}"
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

    - name: Based on the source branch, create a new working branch for PR
      shell: bash
      run: |
        if [ "${{ inputs.repository_owner }}" != "${{ github.repository_owner }}" ]; then
          git checkout -b ${{ steps.generate_branch_name.outputs.branch_name }} source-fork/${{ inputs.source_branch }}
        else
          git checkout -b ${{ steps.generate_branch_name.outputs.branch_name }} origin/${{ inputs.source_branch }}
        fi

    # Generate changelog and do release
    - name: Generate changelog and do release
      id: generate_release
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install -y python3-pip
        pip3 install catkin_tools
        catkin_generate_changelog --all

        # Add all files to git
        git add *
        git commit -m "chore: update all `CHANGELOG.rst`s"

        # Check if new packages are added
        catkin_prepare_release --no-push --bump ${{ inputs.bump_version }}

        # Get the version string from one of the package.xml
        NEW_VERSION=
        while IFS= read -r file; do
          NEW_VERSION=$(grep '<version>' "$file" | head -1 | sed 's/.*<version>\(.*\)<\/version>.*/\1/')
          # Check if the version has a valid format: x.y.z
          if [[ "$NEW_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            echo "✅ New version is: $NEW_VERSION"
            break
          else
            echo "❌ $file has invalid format version $NEW_VERSION (expected x.y.z)"
            ERROR=1
          fi
        done < <(find . -name package.xml)

        # Early return if no valid version is found
        if [ $ERROR -eq 1 ]; then
          echo "ERROR: Not all packages have the correct format version!"
          exit 1
        fi

        # Output the new version
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

        # Commit and push changes
        git add .
        git commit -m "chore: bump version ($NEW_VERSION)"
        git push origin ${{ steps.generate_branch_name.outputs.branch_name }}

    - name: Create Pull Request using gh
      id: create_pr
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        gh pr create \
          --base ${{ inputs.target_branch }} \
          --head ${{ steps.generate_branch_name.outputs.branch_name }} \
          --title "chore: bump version (${{ steps.generate_release.outputs.new_version }}) and update changelog" \
          --body "Bumped version (${{ steps.generate_release.outputs.new_version }}) in package.xml"

        if [ $? -ne 0 ]; then
          echo "pr_created=true" >> $GITHUB_OUTPUT
        else
          echo "pr_created=false" >> $GITHUB_OUTPUT
        fi

    # Delete the remote branch if the PR creation failed
    - name: Delete the remote branch if the PR creation failed
      if: steps.create_pr.outputs.pr_created == false
      shell: bash
      run: |
        git push origin --delete ${{ steps.generate_branch_name.outputs.branch_name }}
