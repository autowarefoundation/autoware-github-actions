name: sync-files
description: ""

inputs:
  token:
    description: ""
    required: true
  config:
    description: ""
    required: false
    default: .github/sync-files.yaml
  pr-base:
    description: ""
    required: false
    default: ${{ github.event.repository.default_branch }}
  pr-branch:
    description: ""
    required: false
    default: sync-files
  pr-title:
    description: ""
    required: false
    default: "chore: sync files"
  pr-commit-message:
    description: ""
    required: false
    default: "chore: sync files"
  pr-labels:
    description: ""
    required: false
    default: ""
  pr-assignees:
    description: ""
    required: false
    default: ""
  pr-reviewers:
    description: ""
    required: false
    default: ""
  auto-merge-method:
    description: ""
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set git config
      uses: autowarefoundation/autoware-github-actions/set-git-config@v1
      with:
        token: ${{ inputs.token }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.8

    - name: Set up yq
      uses: chrisdickinson/setup-yq@v1.0.1
      with:
        yq-version: v4.25.1

    - name: Set up sd
      uses: kenji-miyake/setup-sd@v2

    - name: Parse config
      run: |
        pip3 install pyyaml

        cat ${{ inputs.config }}
        python3 ${GITHUB_ACTION_PATH}/parse_config.py ${{ inputs.config }} > /tmp/sync-files.yaml
        cat /tmp/sync-files.yaml
      shell: bash

    - name: Sync files
      run: |
        set -e

        touch /tmp/result.yaml
        for repository in $(yq ".[].repository" /tmp/sync-files.yaml); do
          yq ".[] | select(.repository == \"$repository\")" /tmp/sync-files.yaml > /tmp/repo-config.yaml

          ref=$(yq ".ref" /tmp/repo-config.yaml)

          git_options=()
          if [ "$ref" != "" ]; then
            git_options+=("-b $ref")
          fi

          rm -rf /tmp/repository
          git clone --depth 1 "$repository" /tmp/repository ${git_options[@]}

          for file_config in $(yq ".files[].dest" /tmp/repo-config.yaml); do
            yq ".files[] | select(.dest == \"$file_config\")" /tmp/repo-config.yaml > /tmp/file-config.yaml

            source_path=$(yq ".source" /tmp/file-config.yaml)
            dest_path=$(yq ".dest" /tmp/file-config.yaml)
            replace=$(yq ".replace" /tmp/file-config.yaml)
            delete_orphaned=$(yq ".delete-orphaned" /tmp/file-config.yaml)
            pre_commands=$(yq ".pre-commands" /tmp/file-config.yaml)
            post_commands=$(yq ".post-commands" /tmp/file-config.yaml)

            full_source_path="/tmp/repository/$source_path"

            modified_source_path=$(mktemp)
            cp "$full_source_path" "$modified_source_path"

            pre_commands=$(echo "$pre_commands" | sed "s|{source}|$modified_source_path|g" | sed "s|{dest}|$dest_path|g")
            post_commands=$(echo "$post_commands" | sed "s|{source}|$modified_source_path|g" | sed "s|{dest}|$dest_path|g")
            [ -n "$pre_commands" ] && echo "pre_commands for $source_path: $pre_commands"
            [ -n "$post_commands" ] && echo "post_commands for $source_path: $post_commands"

            if [ -f "$modified_source_path" ]; then
              if [ -f "$dest_path" ] && [ "$replace" != "true" ]; then
                echo "Skip copying to $dest_path."
                yq -i ".skipped += [\"$dest_path\"]" /tmp/result.yaml
                continue
              fi

              eval "$pre_commands"

              if ! [ -f "$dest_path" ]; then
                echo "Newly copy $modified_source_path to $dest_path."
                mkdir -p $(dirname "$dest_path")

                cp "$modified_source_path" "$dest_path"
                eval "$post_commands"

                yq -i ".added += [\"$dest_path\"]" /tmp/result.yaml
              elif ! diff "$modified_source_path" "$dest_path"; then
                echo "Copy $modified_source_path to $dest_path."

                cp "$modified_source_path" "$dest_path"
                eval "$post_commands"

                yq -i ".changed += [\"$dest_path\"]" /tmp/result.yaml
              else
                echo "$modified_source_path and $dest_path are the same."
                yq -i ".not-changed += [\"$dest_path\"]" /tmp/result.yaml
              fi
            elif [ "$delete_orphaned" = "true" ]; then
              if [ -f "$dest_path" ]; then
                echo "Delete $dest_path."
                rm "$dest_path"
                yq -i ".deleted += [\"$dest_path\"]" /tmp/result.yaml
              else
                echo "$dest_path was not found."
                yq -i ".not-found += [\"$dest_path\"]" /tmp/result.yaml
              fi
            fi
          done
        done

        git status
      shell: bash

    - name: Create PR body
      id: create-pr-body
      run: |
        # Define function
        body_lines=()
        function add-section() {
          title="$1"
          key="$2"

          body_lines+=("## $title" "")
          for f in $(yq ".$key[]" /tmp/result.yaml); do
            body_lines+=("- $f")
          done
          body_lines+=("")
        }

        # Add sections
        add-section "Skipped" "skipped"
        add-section "Added" "added"
        add-section "Changed" "changed"
        add-section "Not changed" "not-changed"
        add-section "Deleted" "deleted"
        add-section "Not found" "not-found"

        # Output multiline strings: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "body<<$EOF" >> $GITHUB_OUTPUT
        echo "$(printf "%s\n" "${body_lines[@]}")" >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT
      shell: bash

    - name: Create PR
      id: create-pr
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ inputs.token }}
        base: ${{ inputs.pr-base }}
        branch: ${{ inputs.pr-branch }}
        title: ${{ inputs.pr-title }}
        commit-message: ${{ inputs.pr-commit-message }}
        body: ${{ steps.create-pr-body.outputs.body }}
        labels: ${{ inputs.pr-labels }}
        assignees: ${{ inputs.pr-assignees }}
        reviewers: ${{ inputs.pr-reviewers }}
        author: github-actions <github-actions@github.com>
        signoff: true
        delete-branch: true

    - name: Check outputs
      run: |
        echo "Pull Request Number - ${{ steps.create-pr.outputs.pull-request-number }}"
        echo "Pull Request URL - ${{ steps.create-pr.outputs.pull-request-url }}"
      shell: bash

    - name: Enable auto-merge
      if: ${{ inputs.auto-merge-method != '' && steps.create-pr.outputs.pull-request-operation == 'created' }}
      run: gh pr merge --${{ inputs.auto-merge-method }} --auto "${{ steps.create-pr.outputs.pull-request-number }}"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
